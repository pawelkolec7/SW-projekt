<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>System Monitorowania Roślin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            text-align: center;
            margin-bottom: 50px;
        }
        .header h1 {
            font-size: 2.5rem;
            color: #333;
        }
        .data-container {
            display: flex;
            justify-content: space-around;
            margin-bottom: 30px;
        }
        .data-box {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            width: 200px;
            text-align: center;
        }
        .data-box h3 {
            font-size: 1.5rem;
            color: #333;
        }
        .data-box p {
            font-size: 1.2rem;
            color: #555;
        }
        .button-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 50px;
        }
        .btn {
            padding: 10px 20px;
            font-size: 1.2rem;
            color: #fff;
            background-color: #28a745;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .btn:hover {
            background-color: #218838;
        }
        .btn-secondary {
            background-color: #007bff;
        }
        .btn-secondary:hover {
            background-color: #0056b3;
        }
        .btn-refresh {
            background-color: #ffc107;
        }
        .btn-refresh:hover {
            background-color: #e0a800;
        }
        .status {
            font-size: 1.2rem;
            text-align: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>

<div class="container">
    <div class="header">
        <h1>System Monitorowania Roślin</h1>
        <p>Aktualne dane oraz możliwość sterowania nawadnianiem roślin</p>
    </div>

    <div class="data-container">
        <div class="data-box" id="temp-box">
            <h3>Temperatura</h3>
            <p id="temperature"></p>
        </div>
        <div class="data-box" id="humidity-box">
            <h3>Wilgotność</h3>
            <p id="humidity"></p>
        </div>
        <div class="data-box" id="light-box">
            <h3>Poziom Światła</h3>
            <p id="light"></p>
        </div>
    </div>

    <div class="button-container">
        <button class="btn" id="waterButton">Podlej Rośliny</button>
        <button class="btn btn-secondary" id="chartsButton">Zobacz Wykresy</button>
        <button class="btn btn-refresh" id="refreshButton">Odśwież Stronę</button>
    </div>

    <div class="status" id="statusMessage"></div>
</div>

<script>
    // Funkcja do pobrania najnowszych danych
    function fetchLatestData() {
        fetch('/latest-data')
        .then(response => response.json())
        .then(data => {
            document.getElementById('temperature').textContent = data.temperature + ' °C';
            document.getElementById('humidity').textContent = data.humidity + ' %';
            document.getElementById('light').textContent = data.light_level + ' lux';
        })
        .catch(error => console.log('Błąd pobierania danych:', error));
    }

    // Funkcja do podlewania roślin
    function waterPlants() {
        fetch('/api/water', { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            document.getElementById('statusMessage').textContent = data.message;
            setTimeout(() => {
                document.getElementById('statusMessage').textContent = '';
            }, 5000);
        })
        .catch(error => console.log('Błąd podlewania:', error));
    }

    // Funkcja do przejścia do wykresów
    function goToCharts() {
        window.location.href = '/charts';
    }

    // Funkcja do odświeżania strony
    function refreshPage() {
        location.reload();
    }

    // Inicjalizacja strony
    window.onload = function() {
        fetchLatestData();

        document.getElementById('waterButton').addEventListener('click', waterPlants);
        document.getElementById('chartsButton').addEventListener('click', goToCharts);
        document.getElementById('refreshButton').addEventListener('click', refreshPage);

        // Automatyczne odświeżanie danych co 3 sekundy
        setInterval(fetchLatestData, 3000);
    };
</script>

</body>
</html>



import sqlite3
import time
from datetime import datetime
from flask import Flask, render_template, request, jsonify
import RPi.GPIO as GPIO
import Adafruit_DHT
import smbus
from threading import Thread

# --- Konfiguracja czujników ---
DHT_SENSOR = Adafruit_DHT.DHT11
DHT_PIN = 4

DEVICE = 0x23
ONE_TIME_HIGH_RES_MODE = 0x20
bus = smbus.SMBus(1)

SOIL_SENSOR_PIN = 17
BUTTON_CONTROL_PIN = 22
PUMP_PIN = 27

GPIO.setmode(GPIO.BCM)
GPIO.setup(SOIL_SENSOR_PIN, GPIO.IN)
GPIO.setup(BUTTON_CONTROL_PIN, GPIO.OUT)
GPIO.setup(PUMP_PIN, GPIO.OUT)
GPIO.output(BUTTON_CONTROL_PIN, GPIO.LOW)
GPIO.output(PUMP_PIN, GPIO.LOW)

# --- Flask ---
app = Flask(__name__)

# --- SQLite ---
DATABASE = "sensor_data.db"

def init_db():
    """Tworzy bazę danych, jeśli jeszcze nie istnieje."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sensor_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            temperature REAL,
            humidity REAL,
            light_level REAL
        )
    """)
    conn.commit()
    conn.close()

def insert_data(temperature, humidity, light_level):
    """Zapisuje dane do bazy."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO sensor_data (temperature, humidity, light_level)
        VALUES (?, ?, ?)
    """, (temperature, humidity, light_level))
    conn.commit()
    conn.close()

def get_data(limit=100):
    """Pobiera ostatnie dane z bazy."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT timestamp, temperature, humidity, light_level
        FROM sensor_data
        ORDER BY timestamp DESC
        LIMIT ?
    """, (limit,))
    data = cursor.fetchall()
    conn.close()
    return data

def get_latest_data():
    """Pobiera najnowsze dane z bazy."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT timestamp, temperature, humidity, light_level
        FROM sensor_data
        ORDER BY timestamp DESC
        LIMIT 1
    """)
    data = cursor.fetchone()
    conn.close()
    return data

# --- Funkcje pomocnicze ---
def read_sensors():
    humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
    try:
        data = bus.read_i2c_block_data(DEVICE, ONE_TIME_HIGH_RES_MODE)
        light_level = (data[0] << 8) | data[1]
    except:
        light_level = None
    return temperature, humidity, light_level

# Funkcja do uśredniania danych po usunięciu skrajnych wartości
def calculate_average(data):
    if len(data) > 2:  # Minimum 3 wartości, żeby usunąć skrajne
        data.remove(max(data))
        data.remove(min(data))
    return sum(data) / len(data) if data else None

# --- Aktualizacja danych w tle ---
def background_task():
    while True:
        temperature_readings = []
        humidity_readings = []
        light_level_readings = []

        for _ in range(10):  # Pobieramy 10 odczytów co minutę (co 6 sekund)
            temperature, humidity, light_level = read_sensors()
            
            # Dodajemy tylko prawidłowe wartości
            if temperature is not None:
                temperature_readings.append(temperature)
            if humidity is not None:
                humidity_readings.append(humidity)
            if light_level is not None:
                light_level_readings.append(light_level)

            time.sleep(6)  # Odczyt co 6 sekund

        # Usuwanie wartości skrajnych i obliczanie średniej
        avg_temperature = calculate_average(temperature_readings)
        avg_humidity = calculate_average(humidity_readings)
        avg_light_level = calculate_average(light_level_readings)

        # Wstawienie uśrednionych danych do bazy
        insert_data(avg_temperature, avg_humidity, avg_light_level)

        time.sleep(240)  # Oczekiwanie przez minutę przed kolejnym pobraniem danych

# --- Funkcja monitorująca wilgotność gleby ---
def monitor_soil_moisture():
    while True:
        if GPIO.input(SOIL_SENSOR_PIN) == GPIO.HIGH:  # Niska wilgotność
            # Przekaż sygnał do portu 22, aby włączyć pompę
            GPIO.output(BUTTON_CONTROL_PIN, GPIO.HIGH)  # Włącz sygnał na porcie 22
            GPIO.output(PUMP_PIN, GPIO.HIGH)  # Włącz pompę
            time.sleep(2)  # Czas działania pompy
            GPIO.output(PUMP_PIN, GPIO.LOW)  # Wyłącz pompę
            GPIO.output(BUTTON_CONTROL_PIN, GPIO.LOW)  # Wyłącz sygnał na porcie 22
        time.sleep(5)  # Sprawdzaj co 5 sekund

# Uruchomienie monitorowania wilgotności gleby w osobnym wątku
Thread(target=monitor_soil_moisture, daemon=True).start()

# --- Trasy ---
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/latest-data")
def latest_data():
    """API do pobierania najnowszych danych (AJAX)."""
    data = get_latest_data()
    if data:
        timestamp, temperature, humidity, light_level = data
        return jsonify({
            "timestamp": timestamp,
            "temperature": temperature,
            "humidity": humidity,
            "light_level": light_level
        })
    return jsonify({})

@app.route("/charts")
def charts():
    data = get_data(limit=100)
    return render_template("charts.html", data=data)

@app.route("/api/data")
def api_data():
    data = get_data(limit=100)
    return jsonify(data)

@app.route("/api/data-paginated")
def api_data_paginated():
    """API do pobierania danych z obsługą stronicowania."""
    limit = int(request.args.get("limit", 10))  # Domyślnie 100 rekordów na stronę
    offset = int(request.args.get("offset", 0))  # Domyślnie zaczynamy od pierwszego rekordu

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT timestamp, temperature, humidity, light_level
        FROM sensor_data
        ORDER BY timestamp DESC
        LIMIT ? OFFSET ?
    """, (limit, offset))
    data = cursor.fetchall()
    conn.close()

    return jsonify(data)
    
@app.route("/api/water", methods=["POST"])
def water_plants():
    """Ręczne podlewanie roślin za pomocą przycisku na stronie."""
    try:
        GPIO.output(PUMP_PIN, GPIO.HIGH)  # Włącz pompę
        GPIO.output(BUTTON_CONTROL_PIN, GPIO.HIGH)  # Włącz sygnał na porcie 22
        time.sleep(2)  # Czas działania pompy
        GPIO.output(PUMP_PIN, GPIO.LOW)  # Wyłącz pompę
        GPIO.output(BUTTON_CONTROL_PIN, GPIO.LOW)  # Wyłącz sygnał na porcie 22
        return jsonify({"message": "Podlewanie zakończone pomyślnie!"}), 200
    except Exception as e:
        return jsonify({"message": f"Błąd podlewania: {str(e)}"}), 500


# --- Inicjalizacja ---
if __name__ == "__main__":
    init_db()
    from threading import Thread
    Thread(target=background_task, daemon=True).start()
    app.run(host="0.0.0.0", port=1234)  
import sqlite3
import time
from datetime import datetime
from flask import Flask, render_template, request, jsonify
import RPi.GPIO as GPIO
import Adafruit_DHT
import smbus
from threading import Thread

# --- Konfiguracja czujników ---
DHT_SENSOR = Adafruit_DHT.DHT11
DHT_PIN = 4

DEVICE = 0x23
ONE_TIME_HIGH_RES_MODE = 0x20
bus = smbus.SMBus(1)

SOIL_SENSOR_PIN = 17
BUTTON_CONTROL_PIN = 22
PUMP_PIN = 27

GPIO.setmode(GPIO.BCM)
GPIO.setup(SOIL_SENSOR_PIN, GPIO.IN)
GPIO.setup(BUTTON_CONTROL_PIN, GPIO.OUT)
GPIO.setup(PUMP_PIN, GPIO.OUT)
GPIO.output(BUTTON_CONTROL_PIN, GPIO.LOW)
GPIO.output(PUMP_PIN, GPIO.LOW)

# --- Flask ---
app = Flask(__name__)

# --- SQLite ---
DATABASE = "sensor_data.db"

def init_db():
    """Tworzy bazę danych, jeśli jeszcze nie istnieje."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sensor_data (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            temperature REAL,
            humidity REAL,
            light_level REAL
        )
    """)
    conn.commit()
    conn.close()

def insert_data(temperature, humidity, light_level):
    """Zapisuje dane do bazy."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO sensor_data (temperature, humidity, light_level)
        VALUES (?, ?, ?)
    """, (temperature, humidity, light_level))
    conn.commit()
    conn.close()

def get_data(limit=100):
    """Pobiera ostatnie dane z bazy."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT timestamp, temperature, humidity, light_level
        FROM sensor_data
        ORDER BY timestamp DESC
        LIMIT ?
    """, (limit,))
    data = cursor.fetchall()
    conn.close()
    return data

def get_latest_data():
    """Pobiera najnowsze dane z bazy."""
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT timestamp, temperature, humidity, light_level
        FROM sensor_data
        ORDER BY timestamp DESC
        LIMIT 1
    """)
    data = cursor.fetchone()
    conn.close()
    return data

# --- Funkcje pomocnicze ---
def read_sensors():
    humidity, temperature = Adafruit_DHT.read_retry(DHT_SENSOR, DHT_PIN)
    try:
        data = bus.read_i2c_block_data(DEVICE, ONE_TIME_HIGH_RES_MODE)
        light_level = (data[0] << 8) | data[1]
    except:
        light_level = None
    return temperature, humidity, light_level

# Funkcja do uśredniania danych po usunięciu skrajnych wartości
def calculate_average(data):
    if len(data) > 2:  # Minimum 3 wartości, żeby usunąć skrajne
        data.remove(max(data))
        data.remove(min(data))
    return sum(data) / len(data) if data else None

# --- Aktualizacja danych w tle ---
def background_task():
    while True:
        temperature_readings = []
        humidity_readings = []
        light_level_readings = []

        for _ in range(10):  # Pobieramy 10 odczytów co minutę (co 6 sekund)
            temperature, humidity, light_level = read_sensors()
            
            # Dodajemy tylko prawidłowe wartości
            if temperature is not None:
                temperature_readings.append(temperature)
            if humidity is not None:
                humidity_readings.append(humidity)
            if light_level is not None:
                light_level_readings.append(light_level)

            time.sleep(6)  # Odczyt co 6 sekund

        # Usuwanie wartości skrajnych i obliczanie średniej
        avg_temperature = calculate_average(temperature_readings)
        avg_humidity = calculate_average(humidity_readings)
        avg_light_level = calculate_average(light_level_readings)

        # Wstawienie uśrednionych danych do bazy
        insert_data(avg_temperature, avg_humidity, avg_light_level)

        time.sleep(240)  # Oczekiwanie przez minutę przed kolejnym pobraniem danych

# --- Funkcja monitorująca wilgotność gleby ---
def monitor_soil_moisture():
    while True:
        if GPIO.input(SOIL_SENSOR_PIN) == GPIO.HIGH:  # Niska wilgotność
            # Przekaż sygnał do portu 22, aby włączyć pompę
            GPIO.output(BUTTON_CONTROL_PIN, GPIO.HIGH)  # Włącz sygnał na porcie 22
            GPIO.output(PUMP_PIN, GPIO.HIGH)  # Włącz pompę
            time.sleep(2)  # Czas działania pompy
            GPIO.output(PUMP_PIN, GPIO.LOW)  # Wyłącz pompę
            GPIO.output(BUTTON_CONTROL_PIN, GPIO.LOW)  # Wyłącz sygnał na porcie 22
        time.sleep(5)  # Sprawdzaj co 5 sekund

# Uruchomienie monitorowania wilgotności gleby w osobnym wątku
Thread(target=monitor_soil_moisture, daemon=True).start()

# --- Trasy ---
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/latest-data")
def latest_data():
    """API do pobierania najnowszych danych (AJAX)."""
    data = get_latest_data()
    if data:
        timestamp, temperature, humidity, light_level = data
        return jsonify({
            "timestamp": timestamp,
            "temperature": temperature,
            "humidity": humidity,
            "light_level": light_level
        })
    return jsonify({})

@app.route("/charts")
def charts():
    data = get_data(limit=100)
    return render_template("charts.html", data=data)

@app.route("/api/data")
def api_data():
    data = get_data(limit=100)
    return jsonify(data)

@app.route("/api/data-paginated")
def api_data_paginated():
    """API do pobierania danych z obsługą stronicowania."""
    limit = int(request.args.get("limit", 10))  # Domyślnie 100 rekordów na stronę
    offset = int(request.args.get("offset", 0))  # Domyślnie zaczynamy od pierwszego rekordu

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
        SELECT timestamp, temperature, humidity, light_level
        FROM sensor_data
        ORDER BY timestamp DESC
        LIMIT ? OFFSET ?
    """, (limit, offset))
    data = cursor.fetchall()
    conn.close()

    return jsonify(data)
    
@app.route("/api/water", methods=["POST"])
def water_plants():
    """Ręczne podlewanie roślin za pomocą przycisku na stronie."""
    try:
        GPIO.output(PUMP_PIN, GPIO.HIGH)  # Włącz pompę
        GPIO.output(BUTTON_CONTROL_PIN, GPIO.HIGH)  # Włącz sygnał na porcie 22
        time.sleep(2)  # Czas działania pompy
        GPIO.output(PUMP_PIN, GPIO.LOW)  # Wyłącz pompę
        GPIO.output(BUTTON_CONTROL_PIN, GPIO.LOW)  # Wyłącz sygnał na porcie 22
        return jsonify({"message": "Podlewanie zakończone pomyślnie!"}), 200
    except Exception as e:
        return jsonify({"message": f"Błąd podlewania: {str(e)}"}), 500


# --- Inicjalizacja ---
if __name__ == "__main__":
    init_db()
    from threading import Thread
    Thread(target=background_task, daemon=True).start()
    app.run(host="0.0.0.0", port=1234)  


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Wykresy</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            color: #333;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }
        header {
            width: 100%;
            background-color: #4CAF50;
            padding: 20px 0;
            text-align: center;
            color: white;
            font-size: 24px;
            font-weight: bold;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        main {
            width: 80%;
            max-width: 800px;
            padding: 20px;
            background: white;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            margin-top: 20px;
            text-align: center;
        }
        h1 {
            margin-bottom: 20px;
        }
        canvas {
            max-width: 100%;
        }
        .btn-container {
            margin-top: 20px;
        }
        button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
            margin: 0 10px;
        }
        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }
        .btn-back {
            background-color: #f44336;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <header>
        Wykresy Monitorowania Warunków
    </header>
    <main>
        <h1>Wykresy wilgotności, temperatury i nasłonecznienia</h1>
        <canvas id="humidityChart" width="400" height="200"></canvas>
        <canvas id="temperatureChart" width="400" height="200"></canvas>
        <canvas id="lightChart" width="400" height="200"></canvas>

        <div class="btn-container">
            <button id="prevBtn">Poprzednie</button>
            <button id="nextBtn">Następne</button>
            <button id="refreshBtn">Odśwież</button>
        </div>

        <!-- Dodany przycisk powrotu -->
        <div>
            <button class="btn-back" onclick="window.location.href='/'">Powrót na stronę główną</button>
        </div>
    </main>

    <script>
        // Przykładowe dane dla wykresu (można je zaktualizować z backendu)
        const humidityData = [30, 40, 50, 60, 70, 80, 90];
        const temperatureData = [22, 23, 24, 25, 26, 27, 28];
        const lightData = [100, 200, 300, 400, 500, 600, 700];

        const labels = ['0', '1', '2', '3', '4', '5', '6'];

        const humidityChart = new Chart(document.getElementById('humidityChart'), {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Wilgotność',
                    data: humidityData,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    fill: false
                }]
            }
        });

        const temperatureChart = new Chart(document.getElementById('temperatureChart'), {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Temperatura (°C)',
                    data: temperatureData,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    fill: false
                }]
            }
        });

        const lightChart = new Chart(document.getElementById('lightChart'), {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Światło (lux)',
                    data: lightData,
                    borderColor: 'rgba(255, 159, 64, 1)',
                    fill: false
                }]
            }
        });

        let currentOffset = 0;  // Zaczynamy od najnowszych danych
        const limit = 10;      // Liczba punktów na stronę

        // Funkcja do pobierania danych wykresu
        function fetchChartData(offset) {
            fetch(`/api/data-paginated?limit=${limit}&offset=${offset}`)
                .then(response => response.json())
                .then(data => {
                    if (data.length === 0 && offset > 0) {
                        document.getElementById("prevBtn").disabled = true;
                    } else {
                        const labels = data.map(row => row[0]).reverse(); // Znaczniki czasowe
                        const temperatures = data.map(row => row[1]).reverse();
                        const humidities = data.map(row => row[2]).reverse();
                        const lightLevels = data.map(row => row[3]).reverse();

                        // Aktualizacja wykresów
                        temperatureChart.data.labels = labels;
                        temperatureChart.data.datasets[0].data = temperatures;
                        temperatureChart.update();

                        humidityChart.data.labels = labels;
                        humidityChart.data.datasets[0].data = humidities;
                        humidityChart.update();

                        lightChart.data.labels = labels;
                        lightChart.data.datasets[0].data = lightLevels;
                        lightChart.update();

                        // Obsługa przycisków
                        document.getElementById("prevBtn").disabled = data.length < limit;
                        document.getElementById("nextBtn").disabled = offset === 0;
                    }
                })
                .catch(error => {
                    console.error("Błąd podczas pobierania danych:", error);
                });
        }

        // Załaduj dane na start
        window.addEventListener("load", () => {
            fetchChartData(currentOffset);
        });

        // Obsługa przycisków
        document.getElementById("prevBtn").addEventListener("click", () => {
            currentOffset += limit;
            fetchChartData(currentOffset);
        });

        document.getElementById("nextBtn").addEventListener("click", () => {
            if (currentOffset >= limit) {
                currentOffset -= limit;
                fetchChartData(currentOffset);
            }
        });

        // Obsługa przycisku "Odśwież"
        document.getElementById("refreshBtn").addEventListener("click", () => {
            location.reload();
        });
    </script>
</body>
</html>
